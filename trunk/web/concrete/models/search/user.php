<?/** * @package Utilities * @category Concrete * @author Andrew Embler <andrew@concrete5.org> * @copyright  Copyright (c) 2003-2008 Concrete5. (http://www.concrete5.org) * @license    http://www.concrete5.org/license/     MIT License * @access private *//** * @access private */Loader::library('search');Loader::model('user_attributes');class UserSearch extends Search {	function UserSearch($searchArray) {				$db = Loader::db();				//$this->totalQuery = "select count(*) as total from Users";					$this->searchQuery = "select Users.uID, Users.uName, Users.uEmail, Users.uDateAdded from Users";				$this->searchQuery = "select Users.uID, Users.uName, Users.uEmail, Users.uDateAdded, Users.uNumLogins from Users";		$this->validSortColumns = "uName,uEmail,uDateAdded,uNumLogins";		if ($searchArray['uName']) {			$this->setLinkingWord();			$this->filters .= "Users.uName like " . $db->qstr('%' . $searchArray['uName'] . '%');		}				if ($searchArray['uVal']) {			$this->setLinkingWord();			$this->filters .= "(Users.uName like " . $db->qstr('%' . $searchArray['uVal'] . '%') . " or Users.uEmail like " . $db->qstr('%' . $searchArray['uVal'] . '%') . ")";		}				if ($searchArray['uEmail']) {			$this->setLinkingWord();						$this->filters .= "Users.uEmail like " . $db->qstr('%' . $searchArray['uEmail'] . '%');		}				if ($searchArray['gID']) {			$gIDStr = '';						if (is_array($searchArray['gID'])) {				foreach($searchArray['gID'] as $gID) {					$_gID = intval($gID);					$gIDStr .= $_gID . ',';				}				$gIDStr = substr($gIDStr, 0, strlen($gIDStr) - 1);							} else {				$gIDStr = intval($searchArray['gID']);			}						$this->searchQuery .= " left join UserGroups ug1 on (ug1.uID = Users.uID) and ug1.gID in ({$gIDStr}) ";			$this->setLinkingWord();			$this->filters .= "ug1.gID in ({$gIDStr})";					}				if ($searchArray['xgID']) {			$xgIDStr = '';			if (is_array($searchArray['xgID'])) {				foreach($searchArray['xgID'] as $gID) {					$_gID = intval($gID);					$xgIDStr .= $_gID . ',';				}				$xgIDStr = substr($xgIDStr, 0, strlen($xgIDStr) - 1);							} else {				$xgIDStr = intval($searchArray['xgID']);			}			$this->searchQuery .= " left join UserGroups ug2 on (ug2.uID = Users.uID) and ug2.gID in ({$xgIDStr}) ";			$this->setLinkingWord();			$this->filters .= "ug2.gID is null ";		}				if ($searchArray['uDateAddedStart']) {			$this->setLinkingWord();			$sd = $searchArray['uDateAddedStart'];			$this->filters .= "Users.uDateAdded >= " . $db->qstr($sd);		}				if ($searchArray['uDateAddedEnd']) {			$this->setLinkingWord();			$ed = $searchArray['uDateAddedEnd'];			$this->filters .= "Users.uDateAdded <= " . $db->qstr($ed);		}		$akeys = implode(':', array_keys($searchArray));		if (preg_match('/uak/',$akeys)) {			$i = 0;			$attribs = UserAttributeKey::getList();			foreach($attribs as $ak) {				if ($searchArray['uak_' . $ak->getKeyID()]) {					$i++;					$akID = $ak->getKeyID();										$this->searchQuery .= " inner join UserAttributeValues uak{$i} on (Users.uID = uak{$i}.uID and uak{$i}.ukID = {$akID}) ";					$this->setLinkingWord();					$this->filters .= "uak{$i}.value like " . $db->qstr($searchArray['uak_' . $ak->getKeyID()] . '%');				}			}		}				$this->total = $this->getTotal();				return $this;	}}?>